# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'GUI.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QApplication, QMessageBox
from random import randint
import signal
import sys

questions = [] # Mảng câu hỏi
answers = [] # Mảng đáp án
ansChoices = [] # Mảng đáp án đã chọn
choosed = [] # Mảng lưu giữ trạng thái đã làm hoặc chưa
numOfQues = 0
trueAnsCount = 0
falseAnsCount = 0
endExam = False
setShuffle = False

try:
    with open('questions.txt', 'r', encoding='utf-8') as file:
        lines = file.readlines()  # Đọc tất cả dòng và lưu vào danh sách
        for line in lines:
            # Thực hiện các thao tác với mỗi dòng

            # print(line.replace('\n', '').split('~'))

            # temp = line.replace('\n', '').replace('\\n', '\n').split('~')
            temp = line.replace('\n', '').split('~')

            for i in range(0, len(temp)): # This for loop use for process the question in question list to change all blank answers in question to space.
                if temp[i] == '':
                    temp[i] = " " # Change to space

            questions.append(temp)

    choosed = questions.copy()
    ansChoices = questions.copy()

    for i in range(0, len(choosed)):
        choosed[i] = False
        ansChoices[i] = ""

    with open('answers.txt', 'r', encoding='utf-8') as file:
        lines = file.readlines()
        for line in lines:
            answers.append(line.replace('\n', ''))
except Exception as e:
    print("Error", e)

    app = QApplication([])

    # Tạo một QMessageBox
    msg_box = QMessageBox()

    # Thiết lập tiêu đề
    msg_box.setWindowTitle("M2ExamTrainer")

    # Thiết lập nội dung
    msg_box.setText("Lỗi đề thi. Vui lòng kiểm tra lại bộ đề!")

    # Thiết lập icon (ví dụ: Information)
    msg_box.setIcon(QMessageBox.Critical)

    # Thiết lập các nút tương tác
    msg_box.setStandardButtons(QMessageBox.Ok)

    # Hiển thị MessageBox và chờ người dùng tương tác
    result = msg_box.exec_()

    # Xử lý kết quả
    if result == QMessageBox.Ok:
        exit(0)

    app.exec_()

# Hiện giao diện hỏi trộn câu hỏi
noti = QApplication([])
msg_box = QMessageBox()
msg_box.setWindowTitle("M2ExamTrainer")
msg_box.setText("Bạn có muốn trộn câu hỏi")
msg_box.setIcon(QMessageBox.Question)
msg_box.setStandardButtons(QMessageBox.Ok | QMessageBox.Cancel)
result = msg_box.exec_()

# Xử lý kết quả
if result == QMessageBox.Ok:
    setShuffle = True
elif result == QMessageBox.Cancel:
    setShuffle = False

noti.quit()

class Ui_M2ExamTrainer(object):
    def setupUi(self, M2ExamTrainer):
        M2ExamTrainer.setObjectName("M2ExamTrainer")
        M2ExamTrainer.resize(1125, 905)
        M2ExamTrainer.setFixedSize(1124, 897)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(M2ExamTrainer.sizePolicy().hasHeightForWidth())
        M2ExamTrainer.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Arial")
        M2ExamTrainer.setFont(font)
        self.screen = QtWidgets.QTextBrowser(M2ExamTrainer)
        self.screen.setGeometry(QtCore.QRect(0, 0, 1131, 721))
        font = QtGui.QFont()
        font.setPointSize(15)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.screen.setFont(font)
        self.screen.setPlaceholderText("")
        self.screen.setObjectName("screen")
        self.btnA = QtWidgets.QPushButton(M2ExamTrainer)
        self.btnA.setGeometry(QtCore.QRect(80, 830, 91, 51))
        font = QtGui.QFont()
        font.setPointSize(20)
        font.setBold(True)
        font.setWeight(75)
        self.btnA.setFont(font)
        self.btnA.setObjectName("btnA")
        self.btnB = QtWidgets.QPushButton(M2ExamTrainer)
        self.btnB.setGeometry(QtCore.QRect(190, 830, 91, 51))
        font = QtGui.QFont()
        font.setPointSize(20)
        font.setBold(True)
        font.setWeight(75)
        self.btnB.setFont(font)
        self.btnB.setObjectName("btnB")
        self.btnC = QtWidgets.QPushButton(M2ExamTrainer)
        self.btnC.setGeometry(QtCore.QRect(300, 830, 91, 51))
        font = QtGui.QFont()
        font.setPointSize(20)
        font.setBold(True)
        font.setWeight(75)
        self.btnC.setFont(font)
        self.btnC.setObjectName("btnC")
        self.btnD = QtWidgets.QPushButton(M2ExamTrainer)
        self.btnD.setGeometry(QtCore.QRect(410, 830, 91, 51))
        font = QtGui.QFont()
        font.setPointSize(20)
        font.setBold(True)
        font.setWeight(75)
        self.btnD.setFont(font)
        self.btnD.setObjectName("btnD")
        self.btnNext = QtWidgets.QPushButton(M2ExamTrainer)
        self.btnNext.setGeometry(QtCore.QRect(980, 830, 91, 51))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.btnNext.setFont(font)
        self.btnNext.setObjectName("btnNext")
        self.btnPre = QtWidgets.QPushButton(M2ExamTrainer)
        self.btnPre.setGeometry(QtCore.QRect(870, 830, 91, 51))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.btnPre.setFont(font)
        self.btnPre.setObjectName("btnPre")
        self.diemKT = QtWidgets.QDoubleSpinBox(M2ExamTrainer)
        self.diemKT.setGeometry(QtCore.QRect(410, 740, 91, 31))
        self.diemKT.setMaximum(10.0)
        self.diemKT.setObjectName("diemKT")
        self.diemCC = QtWidgets.QDoubleSpinBox(M2ExamTrainer)
        self.diemCC.setGeometry(QtCore.QRect(410, 780, 91, 31))
        self.diemCC.setMaximum(10.0)
        self.diemCC.setObjectName("diemCC")
        self.label = QtWidgets.QLabel(M2ExamTrainer)
        self.label.setGeometry(QtCore.QRect(80, 740, 311, 31))
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(M2ExamTrainer)
        self.label_2.setGeometry(QtCore.QRect(80, 780, 311, 31))
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.chooseQues = QtWidgets.QComboBox(M2ExamTrainer)
        self.chooseQues.setGeometry(QtCore.QRect(670, 780, 91, 31))
        font = QtGui.QFont()
        font.setPointSize(13)
        self.chooseQues.setFont(font)
        self.chooseQues.setObjectName("chooseQues")
        self.label_3 = QtWidgets.QLabel(M2ExamTrainer)
        self.label_3.setGeometry(QtCore.QRect(510, 780, 141, 31))
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.screenT = QtWidgets.QTextBrowser(M2ExamTrainer)
        self.screenT.setGeometry(QtCore.QRect(670, 740, 91, 31))
        font = QtGui.QFont()
        font.setPointSize(13)
        self.screenT.setFont(font)
        self.screenT.setPlaceholderText("")
        self.screenT.setObjectName("screenT")
        self.screenF = QtWidgets.QTextBrowser(M2ExamTrainer)
        self.screenF.setGeometry(QtCore.QRect(980, 740, 91, 31))
        font = QtGui.QFont()
        font.setPointSize(13)
        self.screenF.setFont(font)
        self.screenF.setObjectName("screenF")
        self.label_4 = QtWidgets.QLabel(M2ExamTrainer)
        self.label_4.setGeometry(QtCore.QRect(510, 740, 141, 31))
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.label_5 = QtWidgets.QLabel(M2ExamTrainer)
        self.label_5.setGeometry(QtCore.QRect(770, 740, 181, 31))
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.label_5.setFont(font)
        self.label_5.setObjectName("label_5")
        self.label_6 = QtWidgets.QLabel(M2ExamTrainer)
        self.label_6.setGeometry(QtCore.QRect(770, 780, 181, 31))
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.label_6.setFont(font)
        self.label_6.setObjectName("label_6")
        self.screenN = QtWidgets.QTextBrowser(M2ExamTrainer)
        self.screenN.setGeometry(QtCore.QRect(980, 780, 91, 31))
        font = QtGui.QFont()
        font.setPointSize(13)
        self.screenN.setFont(font)
        self.screenN.setObjectName("screenN")

        self.btnPre.clicked.connect(self.preQues)
        self.btnNext.clicked.connect(self.nextQues)
        self.btnA.clicked.connect(self.chooseAnsA)
        self.btnB.clicked.connect(self.chooseAnsB)
        self.btnC.clicked.connect(self.chooseAnsC)
        self.btnD.clicked.connect(self.chooseAnsD)
        self.chooseQues.currentIndexChanged.connect(self.comboBoxChangedQues)

        self.retranslateUi(M2ExamTrainer)
        QtCore.QMetaObject.connectSlotsByName(M2ExamTrainer)

    def retranslateUi(self, M2ExamTrainer):
        _translate = QtCore.QCoreApplication.translate
        M2ExamTrainer.setWindowTitle(_translate("M2ExamTrainer", "M2ExamTrainer"))
        self.btnA.setText(_translate("M2ExamTrainer", "A"))
        self.btnB.setText(_translate("M2ExamTrainer", "B"))
        self.btnC.setText(_translate("M2ExamTrainer", "C"))
        self.btnD.setText(_translate("M2ExamTrainer", "D"))
        self.btnNext.setText(_translate("M2ExamTrainer", "Next"))
        self.btnPre.setText(_translate("M2ExamTrainer", "Previous"))
        self.label.setText(_translate("M2ExamTrainer", "Điểm KT:"))
        self.label_2.setText(_translate("M2ExamTrainer", "Điểm Chuyên Cần:"))
        self.label_3.setText(_translate("M2ExamTrainer", "Chọn câu:"))
        self.label_4.setText(_translate("M2ExamTrainer", "Số câu đúng:"))
        self.label_5.setText(_translate("M2ExamTrainer", "Số câu sai:"))
        self.label_6.setText(_translate("M2ExamTrainer", "Số câu chưa làm:"))

    def updateStatusScreen(self):
        global trueAnsCount
        global falseAnsCount
        self.screenT.setPlainText(str(trueAnsCount))
        self.screenF.setPlainText(str(falseAnsCount))
        self.screenN.setPlainText(str(len(questions) - (trueAnsCount + falseAnsCount)))

    def comboBoxLoad(self):
        global questions
        for i in range(0, len(questions)):
            self.chooseQues.addItem(str(i + 1))

    def shuffleQues(self):
        global setShuffle
        global questions
        global answers
        if not setShuffle:
            return
        for i in range(len(questions) - 1, 0, -1):
            j = randint(0, i)
            questions[i], questions[j] = questions[j], questions[i]
            answers[i], answers[j] = answers[j], answers[i]

    def shuffleAns(self, quesNum): # Shuffle answer list in question
        global setShuffle
        global questions
        global answers
        if not setShuffle:
            return
        ques = questions[quesNum] # Get question and make change on ques list, it can be change data on the questions[quesNum] because they use same memory area
        ans = ques[int(answers[quesNum])] # Get string of correct answer for compare later
        for i in range(len(ques) - 1, 1, -1): # This for loop use for shuffle feature, it run from end of list to 1st element in list with +(-1) step in third parameter of range function
            j = randint(1, i) # This code use to random an integer in range 1 to i
            ques[i], ques[j] = ques[j], ques[i] # This code use to swap element in ques list (ques[i] will be replaced by ques[j] and ques[j] will be replaced by ques[i])

        for i in range(1, len(ques)): # This for loop use to make old correct answer in answer list link again to the correct answer in question
            if ques[i] == ans: # If element number i in ques a.k.a answer number i of question is match to the ans (ans is string variable we create before to compare here). It mean location of correct answer now is at i
                answers[quesNum] = str(i) # Current correct answer is i. This code asignment the current correct answer location to the answer list of exam (Replaced old correct answer with new correct answer. New correct answer is i)

    def scoreCal(self):
        global trueAnsCount
        global falseAnsCount
        global questions
        global endExam
        endExam = True
        averScore = ((10 / len(questions) * trueAnsCount) * 0.6 + self.diemKT.value() * 0.4) - self.diemCC.value()
        self.screen.clear()
        self.screen.append("Điểm hệ số 10: " + str(10 / len(questions) * trueAnsCount))
        self.screen.append("Điểm hệ số 4: " + str(4 / len(questions) * trueAnsCount))
        self.screen.append("Điểm học phần: " + str(averScore))
        self.screen.append('')
        self.screen.append("Để xem lại đáp án các câu trong đề, vui lòng chọn câu trong phần chọn câu phía bên dưới.")
        self.screen.append("Để hiện lại bảng điểm, ấn vào các nút bất kỳ (A, B, C, D, Previous, Next). Nếu chưa nhập điểm KT và điểm chuyên cần bạn hãy nhập điểm sau đó ấn vào các nút bất kỳ.")

    def showQuestion(self, numOfQues, setCurrentValueComboBox):
        global choosed
        if not setCurrentValueComboBox:
            self.chooseQues.setCurrentIndex(numOfQues)
        self.screen.clear()
        self.btnA.setEnabled(False)
        self.btnB.setEnabled(False)
        self.btnC.setEnabled(False)
        self.btnD.setEnabled(False)
        self.screen.setHtml("Câu " + str(numOfQues + 1) + "/" + str(len(questions)) + ": ")
        self.screen.append(str(questions[numOfQues][0]).replace("&nbsp;", " "))
        self.screen.append('')
        for i in range(1, len(questions[numOfQues])):
            if i == 1 and str(questions[numOfQues][i]) != " ":
                self.btnA.setEnabled(True)
            elif i == 2 and str(questions[numOfQues][i]) != " ":
                self.btnB.setEnabled(True)
            elif i == 3 and str(questions[numOfQues][i]) != " ":
                self.btnC.setEnabled(True)
            elif i == 4 and str(questions[numOfQues][i]) != " ":
                self.btnD.setEnabled(True)

            self.screen.append('')

            if choosed[numOfQues] and str(questions[numOfQues][i]) == str(questions[numOfQues][int(answers[numOfQues])]):  # Thực thi khi câu đã làm rồi và câu đang xét là kết quả đúng
                # self.screen.append(chr(i + 64) + ": " + str(questions[numOfQues][i]).replace("&nbsp;", " ").replace("&lt;", "<").replace("&gt;", ">"))
                self.screen.append("<p style='background-color:green;color:white;'>" + chr(i + 64) + ": " + (str(questions[numOfQues][i]).replace('<br>', '\n').replace('&nbsp;', ' ')) + "</p>")

            elif choosed[numOfQues] and str(questions[numOfQues][i]) != str(questions[numOfQues][int(answers[numOfQues])]) and str(questions[numOfQues][i]) == ansChoices[numOfQues]:  # Thực thi khi câu đã làm rồi và câu đang xét là kết quả đã chọn và là kết quả sai
                # self.screen.append(chr(i + 64) + ": " + str(questions[numOfQues][i]).replace("&nbsp;", " ").replace("&lt;", "<").replace("&gt;", ">"))
                self.screen.append("<p style='background-color:red;color:white;'>" + chr(i + 64) + ": " + (str(questions[numOfQues][i]).replace('<br>', '\n').replace('&nbsp;', ' ')) + "</p>")

            else:  # Thực thi khi câu chưa được làm hoặc không phải câu đúng và không phải câu người dùng chọn
                # self.screen.append(chr(i + 64) + ": " + str(questions[numOfQues][i]).replace("&nbsp;", " ").replace("&lt;", "<").replace("&gt;", ">"))
                self.screen.append(chr(i + 64) + ": " + str(questions[numOfQues][i]).replace('<br>', '\n').replace('&nbsp;', ' ').replace("&lt;", "<").replace("&gt;", ">"))
            
            if i == 4: # Chương trình mới chỉ hỗ trợ 4 đáp án nên có nhiều đáp án hơn thì câu lệnh này sẽ ngăn chặn gán tiếp
                break

        # if choosed[numOfQues]:
            # self.screen.append('')
            # self.screen.append('')
            # self.screen.append("Đáp án: " + str(questions[numOfQues][int(answers[numOfQues])]).replace('<br>', '\n').replace('&nbsp;', ' ').replace("&lt;", "<").replace("&gt;", ">"))
            # self.screen.append("Đáp án: " + str(questions[numOfQues][int(answers[numOfQues])]).replace("&nbsp;", " ").replace("&lt;", "<").replace("&gt;", ">"))

    def comboBoxChangedQues(self, index):
        global numOfQues
        numOfQues = int(index)
        self.shuffleAns(numOfQues)
        self.showQuestion(numOfQues, True)

    def chooseAnsA(self):
        try:
            global numOfQues
            global trueAnsCount
            global falseAnsCount
            global questions
            global answers
            global choosed
            global endExam
            if not endExam:
                if not choosed[numOfQues]:
                    choosed[numOfQues] = True
                    ansChoices[numOfQues] = questions[numOfQues][1]
                    if answers[numOfQues] == '1':
                        trueAnsCount += 1
                        self.screen.append('')
                        self.screen.append("Chính xác!")
                    else:
                        falseAnsCount += 1
                        self.screen.append('')
                        # self.screen.append("Đáp án đúng: " + questions[numOfQues][int(answers[numOfQues])].replace("&nbsp;", " ").replace("&lt;", "<").replace("&gt;", ">"))
                        self.screen.append("Đáp án đúng: " + questions[numOfQues][int(answers[numOfQues])].replace('<br>', '\n').replace('&nbsp;', ' ').replace("&lt;", "<").replace("&gt;", ">"))
                    self.updateStatusScreen()
                    if trueAnsCount + falseAnsCount == len(questions):
                        self.scoreCal()
                else:
                    self.screen.append("Câu này bạn đã làm rồi. Vui lòng chuyển sang câu khác!")
            else:
                self.scoreCal()
        except Exception as e:
            with open('log.txt', 'a', encoding='utf-8') as file:
                file.write("=====================================\n")
                file.write("Exception at A\n")
                file.write(type(e).__name__ + "\n")
                file.write(str(e) + "\n")
                file.write("=====================================\n\n")
            self.screen.append("\nĐã xảy ra lỗi không xác định. Kiểm tra lỗi tại file log")
            choosed[numOfQues] = False

    def chooseAnsB(self):
        try:
            global numOfQues
            global trueAnsCount
            global falseAnsCount
            global questions
            global answers
            global choosed
            global endExam
            if not endExam:
                if not choosed[numOfQues]:
                    choosed[numOfQues] = True
                    ansChoices[numOfQues] = questions[numOfQues][2]
                    if answers[numOfQues] == '2':
                        trueAnsCount += 1
                        self.screen.append('')
                        self.screen.append("Chính xác!")
                    else:
                        falseAnsCount += 1
                        self.screen.append('')
                        # self.screen.append("Đáp án đúng: " + questions[numOfQues][int(answers[numOfQues])].replace("&nbsp;", " ").replace("&lt;", "<").replace("&gt;", ">"))
                        self.screen.append("Đáp án đúng: " + questions[numOfQues][int(answers[numOfQues])].replace('<br>', '\n').replace('&nbsp;', ' ').replace("&lt;", "<").replace("&gt;", ">"))
                    self.updateStatusScreen()
                    if trueAnsCount + falseAnsCount == len(questions):
                        self.scoreCal()
                else:
                    self.screen.append("Câu này bạn đã làm rồi. Vui lòng chuyển sang câu khác!")
            else:
                self.scoreCal()
        except Exception as e:
            with open('log.txt', 'a', encoding='utf-8') as file:
                file.write("=====================================\n")
                file.write("Exception at B\n")
                file.write(type(e).__name__ + "\n")
                file.write(str(e) + "\n")
                file.write("=====================================\n\n")
            self.screen.append("\nĐã xảy ra lỗi không xác định. Kiểm tra lỗi tại file log")
            choosed[numOfQues] = False

    def chooseAnsC(self):
        try:
            global numOfQues
            global trueAnsCount
            global falseAnsCount
            global questions
            global answers
            global choosed
            global endExam
            if not endExam:
                if not choosed[numOfQues]:
                    choosed[numOfQues] = True
                    ansChoices[numOfQues] = questions[numOfQues][3]
                    if answers[numOfQues] == '3':
                        trueAnsCount += 1
                        self.screen.append('')
                        self.screen.append("Chính xác!")
                    else:
                        falseAnsCount += 1
                        self.screen.append('')
                        # self.screen.append("Đáp án đúng: " + questions[numOfQues][int(answers[numOfQues])].replace("&nbsp;", " ").replace("&lt;", "<").replace("&gt;", ">"))
                        self.screen.append("Đáp án đúng: " + questions[numOfQues][int(answers[numOfQues])].replace('<br>', '\n').replace('&nbsp;', ' ').replace("&lt;", "<").replace("&gt;", ">"))
                    self.updateStatusScreen()
                    if trueAnsCount + falseAnsCount == len(questions):
                        self.scoreCal()
                else:
                    self.screen.append("Câu này bạn đã làm rồi. Vui lòng chuyển sang câu khác!")
            else:
                self.scoreCal()
        except Exception as e:
            with open('log.txt', 'a', encoding='utf-8') as file:
                file.write("=====================================\n")
                file.write("Exception at C\n")
                file.write(type(e).__name__ + "\n")
                file.write(str(e) + "\n")
                file.write("=====================================\n\n")
            self.screen.append("\nĐã xảy ra lỗi không xác định. Kiểm tra lỗi tại file log")
            choosed[numOfQues] = False

    def chooseAnsD(self):
        try:
            global numOfQues
            global trueAnsCount
            global falseAnsCount
            global questions
            global answers
            global choosed
            global endExam
            if not endExam:
                if not choosed[numOfQues]:
                    choosed[numOfQues] = True
                    ansChoices[numOfQues] = questions[numOfQues][4]
                    if answers[numOfQues] == '4':
                        trueAnsCount += 1
                        self.screen.append('')
                        self.screen.append("Chính xác!")
                    else:
                        falseAnsCount += 1
                        self.screen.append('')
                        # self.screen.append("Đáp án đúng: " + questions[numOfQues][int(answers[numOfQues])].replace("&nbsp;", " ").replace("&lt;", "<").replace("&gt;", ">"))
                        self.screen.append("Đáp án đúng: " + questions[numOfQues][int(answers[numOfQues])].replace('<br>', '\n').replace('&nbsp;', ' ').replace("&lt;", "<").replace("&gt;", ">"))
                    self.updateStatusScreen()
                    if trueAnsCount + falseAnsCount == len(questions):
                        self.scoreCal()
                else:
                    self.screen.append("Câu này bạn đã làm rồi. Vui lòng chuyển sang câu khác!")
            else:
                self.scoreCal()
        except Exception as e:
            with open('log.txt', 'a', encoding='utf-8') as file:
                file.write("=====================================\n")
                file.write("Exception at D\n")
                file.write(type(e).__name__ + "\n")
                file.write(str(e) + "\n")
                file.write("=====================================\n\n")
            self.screen.append("\nĐã xảy ra lỗi không xác định. Kiểm tra lỗi tại file log")
            choosed[numOfQues] = False
        
    def nextQues(self):
        global numOfQues
        global endExam
        if not endExam:
            numOfQues += 1
            if numOfQues >= len(questions):
                numOfQues = 0
            self.shuffleAns(numOfQues)
            self.showQuestion(numOfQues, False)
        else:
            self.scoreCal()
        
    def preQues(self):
        global numOfQues
        global endExam
        if not endExam:
            numOfQues -= 1
            if numOfQues < 0:
                numOfQues = len(questions) - 1
            self.shuffleAns(numOfQues)
            self.showQuestion(numOfQues, False)
        else:
            self.scoreCal()

if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    M2ExamTrainer = QtWidgets.QDialog()
    ui = Ui_M2ExamTrainer()
    ui.setupUi(M2ExamTrainer)
    M2ExamTrainer.show()

    # Init component on dialog and init questions
    ui.comboBoxLoad()
    ui.updateStatusScreen()
    ui.shuffleQues()
    ui.shuffleAns(numOfQues)
    ui.showQuestion(numOfQues, False)

    sys.exit(app.exec_())